rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.email == 'mgzobel@icloud.com' ||
        request.auth.token.email == 'kenergizer@mac.com' ||
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email))
      );
    }

    // Helper function to check if a business is unclaimed
    function isUnclaimed() {
      return !resource.data.userId || resource.data.userId == null;
    }

    // Helper function to validate rating data
    function isValidRating() {
      let rating = request.resource.data.rating;
      return rating >= 0 && rating <= 5;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Pending Claims collection rules
    match /pendingClaims/{claimId} {
      // Allow authenticated users to create their own pending claims
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow users to read their own pending claims
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow users to update their own pending claims
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow users to delete their own pending claims
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Admins collection rules
    match /admins/{adminId} {
      // Allow read access to check admin status
      allow read: if true;
      
      // Only super admins can manage other admins
      allow write: if isAuthenticated() && (
        request.auth.token.email == 'mgzobel@icloud.com' ||
        request.auth.token.email == 'kenergizer@mac.com'
      );
    }

    // Businesses collection rules
    match /businesses/{businessId} {
      // Allow public read access to all businesses
      allow read: if true;
      
      // Allow authenticated users to create business listings
      allow create: if isAuthenticated();
      
      // Allow users to update their own business listings or if they are admin
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isUnclaimed() || 
        isAdmin() ||
        // Allow rating-related updates
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['rating', 'ratingCount']) &&
          request.resource.data.rating >= 0 &&
          request.resource.data.rating <= 5 &&
          request.resource.data.ratingCount > resource.data.ratingCount - 1
        )
      );
      
      // Allow users to delete their own business listings or if they are admin
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isUnclaimed() || isAdmin());

      // Comments subcollection rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      }

      // Ratings subcollection rules
      match /ratings/{ratingId} {
        // Allow public read access to all ratings
        allow read: if true;
        
        // Allow authenticated users to create ratings
        allow create: if isAuthenticated();
        
        // Allow users to update their own ratings
        allow update: if isAuthenticated() && (
          isOwner(resource.data.userId) || 
          isAdmin()
        );
        
        // Allow users to delete their own ratings or admins to delete any rating
        allow delete: if isAuthenticated() && (
          isOwner(resource.data.userId) || 
          isAdmin()
        );
      }
    }

    // Events collection rules
    match /events/{eventId} {
      // Allow public read access to all events
      allow read: if true;
      
      // Allow authenticated users to create events
      allow create: if isAuthenticated();
      
      // Allow users to update/delete their own events or if they are admin
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // User comment stats collection
    match /userCommentStats/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Settings collection rules
    match /settings/{settingId} {
      // Allow public read access to settings
      allow read: if true;
      
      // Only allow admin users to modify settings
      allow write: if isAdmin();
    }
  }
}